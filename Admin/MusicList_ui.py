# Form implementation generated from reading ui file 'admin.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import logging
import os

import pygame as pygame


from PyQt6 import QtCore, QtGui, QtWidgets

from PyQt6.QtGui import QStandardItemModel, QStandardItem, QPixmap
from PyQt6.QtMultimedia import QMediaPlayer
from PyQt6.QtWidgets import QAbstractItemView, QFileDialog, QMessageBox

from Server import ServerThread
from MusicBus import MusicBus
from MusicDao import MusicDao



class Ui_MainWindow(object):

    def __init__(self):
        self.current_interface = "music_list"
        self.music_dao = MusicDao()
        self.music_bus = MusicBus(self.music_dao)



    def start_server(self):
        if not hasattr(self, 'server_thread') or not self.server_thread.isRunning():
            # Khởi tạo và bắt đầu server nếu chưa được khởi tạo hoặc đang dừng
            self.server_thread = ServerThread(self.music_bus, self.music_dao)  # Truyền các tham số cần thiết
            self.server_thread.new_connection.connect(self.update_server_lb)
            self.server_thread.server_stopped.connect(self.on_server_stopped)
            self.server_thread.start()
            self.btn_server.setText("Stop Server")

        else:
            # Dừng server nếu đang chạy
            self.server_thread.quit()
            self.server_thread.wait()  # Đảm bảo thread đã hoàn toàn dừng lại
            self.btn_server.setText("Start Server")




    def update_server_lb(self, message):
        print("Updating server label with message:", message)
        current_text = self.lb_server.text()
        print("Đã nhận thông điệp từ server:", message)
        new_text = f"{current_text}\n{message}"
        self.lb_server.setText(new_text)

    def on_server_stopped(self):
        # Cập nhật giao diện người dùng khi server dừng
        self.update_server_lb("SERVER ĐÃ ĐÓNG")
        print("Server đã được dừng.")  # Thông báo server đã dừng
        # Bạn có thể thêm các mã khác để cập nhật giao diện người dùng nếu cần



    def switch_to_music_list(self):
        if self.current_interface != "music_list":
            self.frame_Admin.hide()
            # Chỉ chuyển đổi giao diện nếu không phải là Music List
            self.frame_lstMS.show()
            self.menu.show()
            self.current_interface = "music_list"

    def switch_to_admin(self):
        if self.current_interface != "admin":
            # Chỉ chuyển đổi giao diện nếu không phải là Admin
            self.frame_lstMS.hide()
            self.frame_Admin.show()
            self.menu.show()
            self.current_interface = "admin"



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 700)
        self.main = QtWidgets.QWidget(parent=MainWindow)
        self.main.setObjectName("main")

        self.frame_menu = QtWidgets.QFrame(parent=self.main)
        self.frame_menu.setEnabled(True)
        self.frame_menu.setGeometry(QtCore.QRect(0, 0, 250, 701))
        self.frame_menu.setAutoFillBackground(False)
        self.frame_menu.setStyleSheet("background-color: #222;")
        self.frame_menu.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_menu.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_menu.setObjectName("frame_menu")

        self.menu = QtWidgets.QFrame(parent=self.frame_menu)
        self.menu.setEnabled(True)
        self.menu.setGeometry(QtCore.QRect(10, 10, 230, 681))
        self.menu.setAutoFillBackground(False)
        self.menu.setStyleSheet("background-color: #333; border-radius: 20px;")
        self.menu.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.menu.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.menu.setObjectName("menu")

        self.lb_Title = QtWidgets.QLabel(parent=self.menu)
        self.lb_Title.setGeometry(QtCore.QRect(30, 210, 181, 81))
        self.lb_Title.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.lb_Title.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_Title.setObjectName("lb_Title")

        self.btn_MusicList = QtWidgets.QPushButton(parent=self.menu)
        self.btn_MusicList.setGeometry(QtCore.QRect(10, 400, 211, 71))
        self.btn_MusicList.setStyleSheet("color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 30px; font: 900 16pt \"Trebuchet MS\"; ")
        self.btn_MusicList.setObjectName("btn_MusicList")
        self.btn_MusicList.clicked.connect(self.switch_to_music_list)
        
        self.lb_titleIMG = QtWidgets.QLabel(parent=self.menu)
        self.lb_titleIMG.setGeometry(QtCore.QRect(13, 15, 206, 191))
        self.lb_titleIMG.setStyleSheet("background-color: rgb(255, 255, 255)")
        self.lb_titleIMG.setText("")
        self.lb_titleIMG.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.lb_titleIMG.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lb_titleIMG.setObjectName("lb_titleIMG")
        pixmap = QPixmap(r"D:\1.SGU\MaNguonMo\Project\MusicPlayer\Admin\logo\logo_1.jpg")
        self.lb_titleIMG.setPixmap(pixmap)
        self.lb_titleIMG.setScaledContents(True)

        self.btn_Admin = QtWidgets.QPushButton(parent=self.menu)
        self.btn_Admin.setGeometry(QtCore.QRect(10, 500, 211, 71))
        self.btn_Admin.setStyleSheet("color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 30px; font: 900 16pt \"Trebuchet MS\"; ")
        self.btn_Admin.setObjectName("btn_Admin")
        self.btn_Admin.clicked.connect(self.switch_to_admin)

        self.frame_lstMS = QtWidgets.QFrame(parent=self.main)
        self.frame_lstMS.setGeometry(QtCore.QRect(250, 0, 850, 700))
        self.frame_lstMS.setStyleSheet("background-color: #222;\n"
"")
        self.frame_lstMS.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_lstMS.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_lstMS.setObjectName("frame_lstMS")

        self.frame = QtWidgets.QFrame(parent=self.frame_lstMS)
        self.frame.setGeometry(QtCore.QRect(5, 10, 731, 361))
        self.frame.setStyleSheet("background-color: #333333; border-radius: 20px")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")

        self.tf_name = QtWidgets.QLineEdit(parent=self.frame)
        self.tf_name.setGeometry(QtCore.QRect(130, 10, 181, 31))
        self.tf_name.setStyleSheet("color: white; background-color: #555555; border-radius: 15px; font: 900 10pt \"Trebuchet MS\";")
        self.tf_name.setObjectName("tf_name")
        self.lb_name = QtWidgets.QLabel(parent=self.frame)
        self.lb_name.setGeometry(QtCore.QRect(10, 10, 91, 31))
        self.lb_name.setObjectName("lb_name")
        self.lb_name.setStyleSheet("color: rgb(255, 255, 255); font: 900 10pt \"Trebuchet MS\";")

        self.error_name = QtWidgets.QLabel(parent=self.frame)
        self.error_name.setGeometry(QtCore.QRect(130, 41, 181, 30))
        self.error_name.setStyleSheet("color: red;")

        self.tf_singer = QtWidgets.QLineEdit(parent=self.frame)
        self.tf_singer.setGeometry(QtCore.QRect(130, 80, 181, 31))
        self.tf_singer.setStyleSheet("color: white; background-color: #555555; border-radius: 15px; font: 900 10pt \"Trebuchet MS\";")
        self.tf_singer.setText("")
        self.tf_singer.setObjectName("tf_singer")
        self.lb_singer = QtWidgets.QLabel(parent=self.frame)
        self.lb_singer.setGeometry(QtCore.QRect(10, 80, 91, 31))
        self.lb_singer.setObjectName("lb_singer")
        self.lb_singer.setStyleSheet("color: rgb(255, 255, 255); font: 900 10pt \"Trebuchet MS\";")

        self.error_singer = QtWidgets.QLabel(parent=self.frame)
        self.error_singer.setGeometry(QtCore.QRect(130, 111, 181, 30))
        self.error_singer.setStyleSheet("color: red;")

        self.lb_genre = QtWidgets.QLabel(parent=self.frame)
        self.lb_genre.setGeometry(QtCore.QRect(10, 150, 91, 31))
        self.lb_genre.setObjectName("lb_genre")
        self.lb_genre.setStyleSheet("color: rgb(255, 255, 255); font: 900 10pt \"Trebuchet MS\";")
        self.cb_genre = QtWidgets.QComboBox(parent=self.frame)
        self.cb_genre.setGeometry(QtCore.QRect(130, 150, 181, 31))
        self.cb_genre.setStyleSheet("color: white; background-color: #555555; font: 900 10pt \"Trebuchet MS\";")
        self.cb_genre.setObjectName("cb_genre")
        self.cb_genre.addItems(["Việt", "Hàn", "Âu Mỹ"])

        self.lb_mp3 = QtWidgets.QLabel(parent=self.frame)
        self.lb_mp3.setGeometry(QtCore.QRect(350, 10, 91, 31))
        self.lb_mp3.setObjectName("lb_mp3")
        self.lb_mp3.setStyleSheet("color: rgb(255, 255, 255); font: 900 10pt \"Trebuchet MS\";")
        self.tf_mp3 = QtWidgets.QLineEdit(parent=self.frame)
        self.tf_mp3.setGeometry(QtCore.QRect(450, 10, 181, 31))
        self.tf_mp3.setStyleSheet("color: white; background-color: #555555; border-radius: 15px; font: 900 10pt \"Trebuchet MS\";")
        self.tf_mp3.setText("")
        self.tf_mp3.setObjectName("tf_mp3")
        self.btn_mp3 = QtWidgets.QPushButton(parent=self.frame)
        self.btn_mp3.setGeometry(QtCore.QRect(650, 10, 51, 31))
        self.btn_mp3.setStyleSheet("color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 10pt \"Trebuchet MS\";")
        self.btn_mp3.setObjectName("btn_mp3")
        self.btn_mp3.clicked.connect(lambda: self.open_file_dialog("mp3"))

        self.error_mp3 = QtWidgets.QLabel(parent=self.frame)
        self.error_mp3.setGeometry(QtCore.QRect(450, 41, 181, 30))
        self.error_mp3.setStyleSheet("color: red;")

        self.lb_img = QtWidgets.QLabel(parent=self.frame)
        self.lb_img.setGeometry(QtCore.QRect(350, 80, 91, 31))
        self.lb_img.setObjectName("lb_img")
        self.lb_img.setStyleSheet("color: rgb(255, 255, 255); font: 900 10pt \"Trebuchet MS\";")
        self.btn_img = QtWidgets.QPushButton(parent=self.frame)
        self.btn_img.setGeometry(QtCore.QRect(650, 80, 51, 31))
        self.btn_img.setStyleSheet("color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 10pt \"Trebuchet MS\";")
        self.btn_img.setObjectName("btn_img")
        self.btn_img.clicked.connect(lambda: self.open_file_dialog("img"))
        self.tf_img = QtWidgets.QLineEdit(parent=self.frame)
        self.tf_img.setGeometry(QtCore.QRect(450, 80, 181, 31))
        self.tf_img.setStyleSheet("color: white; background-color: #555555; border-radius: 15px; font: 900 10pt \"Trebuchet MS\";")
        self.tf_img.setText("")
        self.tf_img.setObjectName("tf_img")
        self.lb_imgfile = QtWidgets.QLabel(parent=self.frame)
        self.lb_imgfile.setGeometry(QtCore.QRect(450, 130, 181, 151))
        self.lb_imgfile.setStyleSheet("background-color: white; border-radius: 0px;")
        self.lb_imgfile.setText("")
        self.lb_imgfile.setObjectName("lb_imgfile")

        self.error_img = QtWidgets.QLabel(parent=self.frame)
        self.error_img.setGeometry(QtCore.QRect(450, 111, 181, 30))
        self.error_img.setStyleSheet("color: red;")

        self.btn_add = QtWidgets.QPushButton(parent=self.frame)
        self.btn_add.setGeometry(QtCore.QRect(10, 260, 91, 31))
        self.btn_add.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
"color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_add.setObjectName("btn_add")
        self.btn_add.clicked.connect(self.add_music)

        self.btn_edit = QtWidgets.QPushButton(parent=self.frame)
        self.btn_edit.setGeometry(QtCore.QRect(120, 260, 91, 31))
        self.btn_edit.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
"color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_edit.setObjectName("btn_edit")
        self.btn_edit.clicked.connect(self.update_music)

        self.btn_delete = QtWidgets.QPushButton(parent=self.frame)
        self.btn_delete.setGeometry(QtCore.QRect(230, 260, 91, 31))
        self.btn_delete.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
"color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_delete.setObjectName("btn_delete")
        self.btn_delete.clicked.connect(self.delete_music)

        self.btn_refresh = QtWidgets.QPushButton(parent=self.frame)
        self.btn_refresh.setGeometry(QtCore.QRect(340, 260, 91, 31))
        self.btn_refresh.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
"color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_refresh.setObjectName("btn_refresh")
        self.btn_refresh.clicked.connect(self.refresh_page)

        self.btn_find = QtWidgets.QPushButton(parent=self.frame)
        self.btn_find.setGeometry(QtCore.QRect(340, 320, 91, 31))
        self.btn_find.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
 "color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_find.setObjectName("btn_find")
        self.tf_find = QtWidgets.QLineEdit(parent=self.frame)
        self.tf_find.setGeometry(QtCore.QRect(10, 320, 311, 31))
        self.tf_find.setStyleSheet("color: white; background-color: #555555; border-radius: 5px;")
        self.tf_find.setText("")
        self.tf_find.setObjectName("tf_find")
        self.btn_find.clicked.connect(self.search_and_display_music)


        self.btn_play = QtWidgets.QPushButton(parent=self.frame)
        self.btn_play.setGeometry(QtCore.QRect(620, 320, 91, 31))
        self.btn_play.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
"color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_play.setObjectName("btn_play")
        self.btn_play.clicked.connect(self.play_music)

        self.scrollArea = QtWidgets.QScrollArea(parent=self.frame_lstMS)
        self.scrollArea.setGeometry(QtCore.QRect(5, 390, 731, 300))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollArea.setStyleSheet("color: black; background-color: white;")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(5, 0, 709, 298))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.tb_music = QtWidgets.QTableView(parent=self.scrollAreaWidgetContents)
        self.tb_music.setGeometry(QtCore.QRect(0, 0, 731, 300))
        self.tb_music.setStyleSheet(
            "QTableView { border: 1px solid gray;}"  # Thêm border 1px, màu xám
            "QHeaderView::section { background-color:rgb(31, 223, 100); border: 1px solid gray; font-weight: bold; color: black;}"
            "border-radius: 20px;"
        )
        self.tb_music.setObjectName("tb_music")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        # đây là frame_ADMIN

        self.frame_Admin = QtWidgets.QFrame(parent=self.main)
        self.frame_Admin.setEnabled(True)
        self.frame_Admin.setGeometry(QtCore.QRect(250, 0, 750, 700))
        self.frame_Admin.setAutoFillBackground(False)
        self.frame_Admin.setStyleSheet("background-color: #222;\n")
        self.frame_Admin.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_Admin.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_Admin.setObjectName("frame_Admin")

        self.frame_Admin_2 = QtWidgets.QFrame(parent=self.frame_Admin)
        self.frame_Admin_2.setEnabled(True)
        self.frame_Admin_2.setGeometry(QtCore.QRect(10, 10, 730, 681))
        self.frame_Admin_2.setAutoFillBackground(False)
        self.frame_Admin_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_Admin_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_Admin_2.setObjectName("frame_Admin_2")
        self.frame_Admin_2.setStyleSheet("background-color: #333; border-radius: 10px;")

        self.banner = QtWidgets.QLabel(parent=self.frame_Admin_2)
        self.banner.setGeometry(QtCore.QRect(10, 10, 711, 140))
        self.banner.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.banner.setObjectName("banner")
        self.banner.setStyleSheet("border-radius: 5px;")
        self.banner.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.banner.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        pixmap = QPixmap(r"D:\1.SGU\MaNguonMo\Project\MusicPlayer\Admin\logo\banner_1.jpg")
        self.banner.setPixmap(pixmap)
        self.banner.setScaledContents(True)

        # Tạo một QWidget mới để chứa QScrollArea và QLabel
        self.scroll_widget = QtWidgets.QWidget(parent=self.frame_Admin_2)
        self.scroll_widget.setGeometry(QtCore.QRect(10, 195, 710, 470))
        self.scroll_widget.setStyleSheet("background-color: rgb(255, 255, 255);")
        # Tạo một QScrollArea nhỏ bên trong QWidget mới
        self.inner_scrollArea = QtWidgets.QScrollArea(parent=self.scroll_widget)
        self.inner_scrollArea.setGeometry(QtCore.QRect(0, 0, 710, 470))

        self.inner_scrollArea.setWidgetResizable(True)
        self.inner_scrollArea.setStyleSheet("border: none;")

        # Thêm QLabel mới vào cùng vị trí và kích thước
        self.lb_server = QtWidgets.QLabel(parent=self.scroll_widget)
        self.lb_server.setGeometry(QtCore.QRect(10, 0, 710, 470))
        self.lb_server.setAlignment(QtCore.Qt.AlignTop)
        self.lb_server.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
                                     "background-color: rgb(255, 255, 255);border-radius: 15px;")
        self.lb_server.setObjectName("lb_server")

        self.inner_scrollArea.setWidget(self.lb_server)

        self.btn_server = QtWidgets.QPushButton(parent=self.frame_Admin_2)
        self.btn_server.setGeometry(QtCore.QRect(10, 157, 100, 31))
        self.btn_server.setObjectName("btn_server")
        self.btn_server.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";\n"
                                    "color: rgb(0,0,0); background-color: rgb(31, 223, 100); border-radius: 15px; font: 900 12pt \"Trebuchet MS\";")
        self.btn_server.clicked.connect(self.start_server)


        self.frame_Admin.hide()

        MainWindow.setCentralWidget(self.main)
        self.music_dao = MusicDao()
        self.music_bus = MusicBus(self.music_dao)

        self.show_table()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lb_Title.setText(_translate("MainWindow", "Chill N Free"))
        self.lb_Title.setStyleSheet("color: white; font: 900 18pt \"Trebuchet MS\";")
        self.btn_MusicList.setText(_translate("MainWindow", "MUSIC LIST"))
        self.btn_Admin.setText(_translate("MainWindow", "ADMIN"))
        self.lb_name.setText(_translate("MainWindow", "Tên Bài Hát: "))
        self.lb_singer.setText(_translate("MainWindow", "Tên Ca Sĩ:"))
        self.lb_genre.setText(_translate("MainWindow", "Thê Loai Nhac:"))
        self.lb_mp3.setText(_translate("MainWindow", "MP3 Source:"))
        self.btn_mp3.setText(_translate("MainWindow", "File"))
        self.lb_img.setText(_translate("MainWindow", "IMG File:"))
        self.btn_img.setText(_translate("MainWindow", "File"))
        self.btn_add.setText(_translate("MainWindow", "ADD"))
        self.btn_edit.setText(_translate("MainWindow", "EDIT"))
        self.btn_delete.setText(_translate("MainWindow", "DELETE"))
        self.btn_refresh.setText(_translate("MainWindow", "REFRESH"))
        self.btn_find.setText(_translate("MainWindow", "FIND"))
        self.btn_play.setText(_translate("MainWindow", "PLAY"))
        self.btn_server.setText(_translate("MainWindow", "Start Server"))
        self.lb_server.setText(_translate("MainWindow", " "))

    def show_table(self):
        music_dao=MusicDao()
        # Truyền thể hiện của MusicDao khi tạo MusicBus
        music_bus = MusicBus(music_dao)
        music_list = music_bus.get_all_music()
        # Tạo một model để lưu trữ dữ liệu
        model = QStandardItemModel(len(music_list), 6)
        model.setHorizontalHeaderLabels(["ID", "Name", "Singer", "Genre", "MP3 Source","IMG File"])
        # Đổ dữ liệu vào model
        for row, music in enumerate(music_list):
            for col, field in enumerate(music):
                item = QStandardItem(str(field))
                model.setItem(row, col, item)

        # Thiết lập model cho bảng
        self.tb_music.setModel(model)
        self.tb_music.setEditTriggers(
            QAbstractItemView.EditTrigger.NoEditTriggers)  # Không cho phép chỉnh sửa trực tiếp trên bảng
        self.tb_music.setSelectionBehavior(
            QAbstractItemView.SelectionBehavior.SelectRows)  # Chọn cả hàng khi click vào ô
        self.tb_music.horizontalHeader().setStretchLastSection(True)  # Tự động căn chỉnh cột cuối cùng

        # Kết nối sự kiện selectionChanged của bảng với phương thức on_table_selection_changed
        self.tb_music.selectionModel().selectionChanged.connect(self.on_table_selection_changed)
        # Kết nối sự kiện nhấn nút "Play" với phương thức play_music()
        self.btn_play.clicked.connect(self.play_music)

    #Đổ dữ liệu từ bảng lên tf để sửa
    def on_table_selection_changed(self, selected):

        indexes = selected.indexes()
        if indexes:
            # Lấy chỉ số hàng được chọn
            selected_row = indexes[0].row()
            # Lấy dữ liệu từ model tại hàng được chọn
            model = self.tb_music.model()
            id = model.index(selected_row, 0).data()
            name = model.index(selected_row, 1).data()
            singer = model.index(selected_row, 2).data()
            genre = model.index(selected_row, 3).data()
            mp3 = model.index(selected_row, 4).data()
            img = model.index(selected_row, 5).data()

            # Đường dẫn đến thư mục chứa ảnh
            img_directory = r"D:\1.SGU\MaNguonMo\Project\MusicPlayer\Admin\img"

            # Cập nhật đường dẫn đầy đủ của tệp ảnh
            img_path = os.path.join(img_directory, img)

            # Đổ dữ liệu lên các QLineEdit và QComboBox tương ứng
            self.tf_name.setText(name)
            self.tf_singer.setText(singer)
            self.cb_genre.setCurrentText(genre)
            self.tf_mp3.setText(mp3)
            self.tf_img.setText(img)
            pixmap = QPixmap(img_path)
            self.lb_imgfile.setPixmap(pixmap)
            self.lb_imgfile.setScaledContents(True)


    def open_file_dialog(self, file_type):
        if file_type == "mp3":
            file_path, _ = QFileDialog.getOpenFileName(None, "Chọn tệp MP3", "", "MP3 files (*.mp3)")
            text_field = self.tf_mp3
        elif file_type == "img":
            file_path, _ = QFileDialog.getOpenFileName(None, "Chọn tệp IMG", "",
                                                       "Image files (*.png *.jpg *.jpeg *.bmp)")
            text_field = self.tf_img

        if file_path:
            # Lấy chỉ tên tệp từ đường dẫn đầy đủ
            file_name = os.path.basename(file_path)
            # Thiết lập chỉ tên tệp trong trường văn bản
            text_field.setText(file_name)
            # Load hình ảnh lên lb_img
            pixmap = QPixmap(file_path)
            self.lb_imgfile.setPixmap(pixmap)
            self.lb_imgfile.setScaledContents(True)
        else:
            logging.info("No file selected.")

    def refresh_page(self):
        # Gọi phương thức show_table() để làm mới dữ liệu trong bảng
        self.show_table()
        # Làm mới dữ liệu trong các trường nhập liệu
        self.tf_name.clear()
        self.tf_singer.clear()
        self.cb_genre.setCurrentIndex(0)
        self.tf_mp3.clear()
        self.tf_img.clear()
        self.lb_imgfile.clear()
        self.tf_find.clear()

        self.error_name.clear()
        self.error_name.hide()
        self.error_singer.clear()
        self.error_singer.hide()
        self.error_mp3.clear()
        self.error_mp3.hide()
        self.error_img.clear()
        self.error_img.hide()

    def delete_music(self):
        try:
            selected_indexes = self.tb_music.selectionModel().selectedIndexes()
            if selected_indexes:  # Kiểm tra xem có hàng nào được chọn không
                # Lấy chỉ số hàng đầu tiên được chọn
                selected_row = selected_indexes[0].row()
                model = self.tb_music.model()
                music_id = model.index(selected_row, 0).data()
                print(music_id)
                if music_id is not None:  # Kiểm tra xem music_id có giá trị không
                    # Gọi phương thức xóa bản ghi từ MusicBus
                    self.music_bus.delete_music_by_id(music_id)
                    self.refresh_page()
                    print("Xóa thành công")
                else:
                    print("Không có ID âm nhạc tương ứng.")
            else:
                print("Không có hàng nào được chọn.")
        except Exception as e:
            logging.error(f"An error occurred: {str(e)}")
            print("lỗi tại đây")



    def update_music(self):
        if not self.validate_textfields():
            return
        try:
            # Lấy chỉ số hàng đang được chọn
            selected_indexes = self.tb_music.selectionModel().selectedIndexes()
            if selected_indexes:
                selected_row = selected_indexes[0].row()
                model = self.tb_music.model()

                # Lấy thông tin từ các trường dữ liệu
                music_id = model.index(selected_row, 0).data()
                name = self.tf_name.text().strip()
                singer = self.tf_singer.text().strip()
                genre = self.cb_genre.currentText().strip()
                mp3_path = self.tf_mp3.text().strip()
                img_path = self.tf_img.text().strip()

                # Cập nhật dữ liệu thông qua MusicBus
                self.music_bus.update_music(music_id, name, singer, genre, mp3_path, img_path)

                # Cập nhật lại bảng và làm mới trang
                self.show_table()
                self.refresh_page()

                print("Cập nhật thành công")
        except Exception as e:
            logging.error(f"Lỗi khi cập nhật dữ liệu: {str(e)}")


    def play_music(self):
        # Lấy dữ liệu từ model
        selected_indexes = self.tb_music.selectionModel().selectedIndexes()
        if selected_indexes:
            # Lấy chỉ số hàng đầu tiên được chọn
            selected_row = selected_indexes[0].row()
            # Lấy dữ liệu từ model tại hàng được chọn
            model = self.tb_music.model()
            mp3_filename = model.index(selected_row, 4).data()

            # Xây dựng đường dẫn đầy đủ đến tệp âm thanh
            music_folder = r"D:\1.SGU\MaNguonMo\Project\MusicPlayer\Admin\mp3"
            mp3_path = os.path.join(music_folder, mp3_filename)

            # Kiểm tra xem thư viện pygame đã được khởi tạo chưa
            if not pygame.mixer.get_init():
                pygame.mixer.init()

            # Kiểm tra xem nhạc đã được phát hay chưa
            if pygame.mixer.music.get_busy():
                # Nếu nhạc đang được phát, tạm dừng
                pygame.mixer.music.pause()
                # Cập nhật văn bản trên nút thành "Play"
                self.btn_play.setText("Play")
            else:
                # Nếu nhạc chưa được phát, tải và phát nhạc
                pygame.mixer.music.load(mp3_path)
                pygame.mixer.music.play()
                # Cập nhật văn bản trên nút thành "Pause"
                self.btn_play.setText("Pause")

    def update_error_messages(self):
        # Kiểm tra các textfield
        name = self.tf_name.text().strip()
        singer = self.tf_singer.text().strip()
        mp3_path = self.tf_mp3.text().strip()
        img_path = self.tf_img.text().strip()

        # Xóa tất cả các thông báo lỗi
        self.error_name.clear()
        self.error_name.hide()
        self.error_singer.clear()
        self.error_singer.hide()
        self.error_mp3.clear()
        self.error_mp3.hide()
        self.error_img.clear()
        self.error_img.hide()

        # Hiển thị thông báo lỗi nếu có
        if name == "":
            self.error_name.setText("Vui lòng nhập tên!")
            self.error_name.show()

        if singer == "":
            self.error_singer.setText("Vui lòng nhập tên ca sĩ!")
            self.error_singer.show()

        if mp3_path == "":
            self.error_mp3.setText("Vui lòng nhập đường dẫn MP3!")
            self.error_mp3.show()

        if img_path == "":
            self.error_img.setText("Vui lòng nhập đường dẫn ảnh!")
            self.error_img.show()

    def validate_textfields(self):
        self.update_error_messages()

        # Kiểm tra nếu có thông báo lỗi nào đang được hiển thị
        if self.error_name.isVisible() or self.error_singer.isVisible() or self.error_mp3.isVisible() or self.error_img.isVisible():
            return False
        else:
            return True

    def add_music(self):
        # Kiểm tra các trường nhập liệu trống
        if not self.validate_textfields():
            return

        # Nếu không có trường nào trống, tiến hành thêm bản ghi
        name = self.tf_name.text().strip()
        singer = self.tf_singer.text().strip()
        genre = self.cb_genre.currentText().strip()
        mp3_path = self.tf_mp3.text().strip()
        img_path = self.tf_img.text().strip()

        # Thực hiện thêm bản ghi qua phương thức add_music của MusicBus
        mp3_file_name = os.path.basename(mp3_path)
        img_file_name = os.path.basename(img_path)
        self.music_bus.add_music(name, singer, genre, mp3_file_name, img_file_name, self.music_dao.connection)

        # Làm mới trang sau khi thêm bản ghi
        self.refresh_page()

    def search_and_display_music(self):
        # Lấy nội dung từ ô nhập liệu
        search_text = self.tf_find.text()

        # Thực hiện tìm kiếm âm nhạc
        if search_text:
            # Gọi hàm search_music của đối tượng MusicDao để thực hiện tìm kiếm trong cơ sở dữ liệu
            search_result = music_dao.search_music(search_text)

            # Xóa dữ liệu hiện có trên bảng tb_music
            self.tb_music.setModel(None)
            self.tb_music.setModel(QtGui.QStandardItemModel())

            # Hiển thị kết quả tìm kiếm trên bảng
            if search_result:
                model = QtGui.QStandardItemModel(len(search_result), 6)
                model.setHorizontalHeaderLabels(["ID", "Song Name", "Singer Name", "Genre", "MP3", "IMG"])
                for row, record in enumerate(search_result):
                    for column, value in enumerate(record):
                        item = QtGui.QStandardItem(str(value))
                        model.setItem(row, column, item)
                self.tb_music.setModel(model)

                # Gọi phương thức on_table_selection_changed để hiển thị thông tin chi tiết khi chọn một dòng trên bảng
                self.tb_music.selectionModel().selectionChanged.connect(self.on_table_selection_changed)
            else:
                print("Không tìm thấy kết quả phù hợp.")
        else:
            print("Vui lòng nhập từ khóa tìm kiếm.")


if __name__ == "__main__":
    import sys

    music_dao = MusicDao()  # Tạo một thể hiện của lớp MusicDao
    music_bus = MusicBus(music_dao)  # Truyền thể hiện của MusicDao khi tạo MusicBus
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.show_table()
    sys.exit(app.exec())
